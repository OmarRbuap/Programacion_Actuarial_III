set.seed(1)
len <- c()
for(i in 1:100){
z <- 5
contador <- 1
vector <- c()
while((z >= 3 && z <= 10) && contador < 100){
vector <- c(vector,z)
moneda <- rbinom(1,1,0.5)
if (moneda == 1) {
z <- z + 1
} else{
z <- z - 1
}
contador <- contador + 1
}
len <- c(len,length(vector))
}
len
x <- (-300:300)/100
y <- (x^2)+5
plot(x,y,type = "l")
plot(x,y)
miplot <- function(x,y, Edick="l",...){
plot(x,y,type=ana,...)
}
miplot(x,y)
miplot <- function(x,y,Edick="l",...){
plot(x,y,type=Edick,...)
}
miplot(x,y)
miplot(x,y,main="Par치bola")
miplot(x,y,main="Par치bola",sub="y=x^2+5")
miplot(x,y,main="Par치bola",sub="y=x^2+5",xlab="Horizontal",ylab="Vertical")
miplot(x,y,main="Par치bola",sub="y=x^2+5",
xlab="Horizontal", ylab="Vertical", col="red")
?paste
lm
lm <- function(x){x*x}
lm
rm(lm)
lm
serch()
search()
library(grDevices)
search()
library(ggplot2)
search()
cubica <- hacer.potencia(3)
cubica
cubica(3)
cubica <- hacer.potencia(3)
cubica(3)
hacer.potencia <- function(n){
potencia <- function(x){
x^n
}
potencia
}
cubica <- hacer.potencia(3)
cubica(3)
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-01"))
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
x <-as.Date("1997-06-01")
unclass(x)
y <-as.Date("2017-03-21")
unclass(y)
unclass(y-x)
x <-as.Date("1997-07-12")
unclass(x)
y <-as.Date("2017-03-21")
unclass(y)
unclass(y-x)
ct <- as.POSIXct.date(Sys.time())
lt <- as.POSIXct.date(Sys.time())
lt <- as.POSIXlt.date(Sys.time())
lt
x <-as.Date("1997-07-12")
lt
weekdays(x)
lapply
?match
x <- list(a=1:5, b=rnorm(1000))
lapply (x,mean)
$a
$b
x <- list(a=1:5, b=rnorm(10), c=(10,1), d=(10,2))
lapply(x,mean)
x <- list(a=1:5, b=rnorm(10), c=rnorm(10,1), d=rnorm(10,2))
lapply(x,mean)
x <- list(a=1:5, b=rnorm(10), c=rnorm(10,1), d=rnorm(10,2))
lapply(x,mean)
x <- list(a=1:5, b=rnorm(10), c=rnorm(10,1), d=rnorm(10,2))
lapply(x,mean)
x <- 1:4
lapply(x, runif)
?runif
x <-1:4
lapply(x, runif,max=15,min=5)
x <- list(a=1:5, b=rnorm(10), c=rnorm(10,3), d=rnorm(10,5))
lapply(x,mean)
x <- list(a=1:5, b=rnorm(10), c=rnorm(10,3), d=rnorm(10,5))
lapply(x,mean)
x <- list(a=1:5, b=rnorm(10), c=rnorm(10,3), d=rnorm(10,5))
sapply(x,mean)
str(apply)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
x <- matrix(rnorm(200),20,10)
apply(x,1,quantile, probs=c(0.25,0.75))
?quantile
?quantile
?array
a <- array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("R_Programming")
install_from_swirl("R_Programming")
swirl()
5+7
swirl()
library(swirl)
swirl
swirl()
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
Old.dir <- getwd()
old.dir <- getwd()
dir.create(testdir)
testdir <- dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.rename("mytest2.R","mytest3.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1","folder2")
?dir.create
file.create("testdir2")
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
setwd()
setwd(old.dir)
list(rep(1,4),rep(2,3),rep(3,2), rep(4,1))
mapply(rep(1:4,4:1))
mapply(rep,1:4,4:1)
mapply(rep,1:5,4:1)
mapply(rep,1:5,4:1)
noise <- function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
?sd
mapply(noise,1:5,1:5,2)
str(tapply)
?apply
?runif
x <- c(rnorm(10),runif(10),rnorm(10,1))
#gl=generar niveles
f <- gl(3,10)
f
x <- c(rnorm(10),runif(10),rnorm(10,1))
#gl=generar niveles
f <- gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean,simplify = F)
?split
split(x,f)
lapply(split(x,f),mean)
library(datasets)
airquality
split(airquality,temp,month)
split(airquality)
lapply(split(x,f),mean)
split(airquality)
split(x,f)
split(airquality,temp)
x <- airquality
x
split(x)
x <- c(rnorm(10),runif(10),rnorm(10,1))
#gl=generar niveles
f <- gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean,simplify = F)
?split
split(x,f)
?aiquality
y <- x["temp"]
y
y <- x["Temp"]
y
x <- airquality
x
y <- x[c("Temp","Mounth")]
y
airquality
x <- airquality
x
y <- x[c("Temp","Mounth")]
y
x <- airquality
x
y <- x["Temp","Mounth"]
y
y <- airquality[c("Temp","Mounth")]
y
tapply(airquality, airqualitu$Temp,airquality$Month, simplify = T)
tapply(airquality, airqualitu$Temp,airquality$Month,mean, simplify = T)
tapply(airquality, airqualitu$Temp,airquality$Month,mean, simplify = T)
tapply(airqualitu$Temp,
airquality$Month,mean, simplify = T)
tapply(airquality$Temp,
airquality$Month,mean, simplify = T)
sapply(split(aiquality$Temp,airquality$Month),mean)
split(aiquality$Temp,airquality$Month)
split(airquality$Temp,airquality$Month)
sapply(split(airquality$Temp,airquality$Month),mean)
s <- split(airquality,airquality$Month)
s
lapply(s,function(x) colMeans(x[,1:3]))
lapply(s,function(x) colMeans(x[,1:3],!is.na(s)))
!is.na(s)
lapply(s,function(x) colMeans(x[,1:3],na.rm = T))
sapply(s,function(x) colMeans(x[,1:3],na.rm = T))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
x
str(split(x,list(f1,f2)))
list(f1,f2)
?options
read.csv("noexiste")
otions(error=recover)
read.csv("noexiste")
options(error=recover)
read.csv("noexiste")
swirl
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2),each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
print(my_char)
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "omar")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!",sep=" ")
vec1 <- c(1:3)
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4, sep = "-")
library(swirl)
swirl
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_date == NA
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf - Inf
str(str)
str(lm)
str(lm)
str(ls)
x <- rnorm(100)
str(x)
summary(x)
f <- gl(40,10) #40 niveles repetido 10 veces
str(f)
summary(f)
str(airquality)
m <-matrix(rnorm(100),10,10)
str(m)
s <- split(aiquality,airquality$Month)
s <- split(airquality,airquality$Month)
str(s)
?dnorm
x <- rnorm(1)
x
y <- rnorm(10, 50,5)
y
summary(x)
summary(y)
x <- rnorm(10)
x
y <- rnorm(10, 50,5)
y
summary(x)
summary(y)
x <- rnorm(10)
x
y <- rnorm(10,50,5)
y
summary(x)
summary(y)
x <- rnorm(10)
x
y <- rnorm(10,50,5)
y
summary(x)
summary(y)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10,1)
rpois(10,2)
rpois(10,20)
ppois(2,2) ## Pr[X<=2]
ppois(4,2)
ppois(6,2) ## Pr[X<=6]
set.seed(20)
set.seed(2)
b0 <- 0.5
b1 <- 2
x <- rnorm(100)
y <- b0 + b1*x
set.seed(2)
b0 <- 0.5
b1 <- 2
x <- rnorm(100)
y <- b0 + b1*x
plot(x,)y
plot(x,y)
set.seed(2)
b0 <- 0.5
b1 <- 2
x <- rnorm(100)
e <- rnorm (100,0,2)
y <- b0 + b1*x +e
plot(x,y)
summary(y)
plot(x,y,main= "Modelo Lineal")
plot(x,y,main= "Modelo Lineal", col="blue")
x <- rbinom(100,1,0.5)#numero de exitos en una serie de intentos
e <- rnorm(100,0,2)
set.seed(10)
x <- rbinom(100,1,0.5)#numero de exitos en una serie de intentos
e <- rnorm(100,0,2)
y <- 0.5 +2*x + e
summary(y)
plot(x,y,main="Modelo Lineal", col="dark red")
y <- 0.5 +2*x
summary(y)
plot(x,y,main="Modelo Lineal", col="dark red")
y <- 0.5 +2*x +e
summary(y)
plot(x,y,main="Modelo Lineal", col="dark red")
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y,main="Modelo Lineal", col="forestgreen")
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(1:10) #permutacion
sample(1:10)
sample(1:10,replace = TRUE) #Extraccion con reemplazo
sample(1:10,replace = TRUE) #Extraccion con reemplazo
system.time(readLines("http://www.fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
hilbert <- function(n){
i <- 1:n
1/outer(i-1,i,"+")
}
x <- hilbert(1000)
system.time(svd(x))
x <- hilbert(1000)
system.time(svd(x))
urla <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rwons.csv?accessType=DOWNLOAD&boom=true"
download.file(urla,"camaras.csv")
urla <- "https://data.baltimorecity.gob/api/views/dz54-2aru/rwons.csv?accessType=DOWNLOAD&boom=true"
download.file(urla,"camaras.csv")
urla <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&boom=true"
download.file(urla,"camaras.csv")
install.packages("rJava")
library(rJava)
library("rJava")
install.packages("xlsx")
DatosCamara <- read.xlsx2("./data/camaras.xlsx",sheetIndex =1, header=TRUE)
rJava::
library("rJava")
library()
install.packages("XML")
library(XML)
url <- "http://www.w3schools.com/xml/simple.xml"
data <- xmlTreeParse(url, useInternalNodes=TRUE)
install.packages("jsonlite")
jsonData <- fromJSON("https://api.github.com/users/OmarRosas/repos")
library(jsonlite)
library()
library("rJava")
library("rJava");library(xlsx)
DatosCamara <- read.xlsx2("./data/camaras.xlsx",sheetIndex =1, header=TRUE)
urla <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&boom=true"
download.file(urla,"camaras.csv")
list.files()
datosCamara <- read.table("camaras.csv",sep = ",",header = T)
if(!file.exists("data")){dir.create("data")}
url1 <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlxs?accessType=DOWNLOAD"
download.file(url1, destfile = "./data/camaras.xlsx", method = "curl")
setwd()
dirwd()
getwd()
download.file(url1, destfile = "C:/Users/omar/Documents/camaras.xlsx", method = "curl")
download.file(url1, destfile = "C:/Users/omar/Documents", method = "curl")
setwd("C:/Users/omar/Desktop/data")
list.files("./data")
list.files()
list.files("C:/Users/omar/Desktop/data")
url1 <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(url1, destfile = "C:/Users/omar/Desktop/data", method = "curl")
library()
library("rJava")
install.packages("rJava")
library("ggplot2")
library("rJava")
DatosCamara <- read.xlsx2("./data/camaras.xlsx",sheetIndex =1, header=TRUE)
require("rJava")
?libname
??libname
search()
?rJava
library()
library("xlsx")
library("xlsx")
install.packages("rJava")
library("rJava")
